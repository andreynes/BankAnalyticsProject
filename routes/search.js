const express = require('express');
const router = express.Router();
const Data = require('../models/Data');

// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –ø–æ–∏—Å–∫–∞
router.post('/', async (req, res) => {
    try {
        console.log('\n=== –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å ===');
        console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:', req.body);
        const { tags, blockType } = req.body;

        if (!tags || !Array.isArray(tags) || tags.length === 0) {
            console.log('‚ùå –û—à–∏–±–∫–∞: —Ç–µ–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã');
            return res.status(400).json({
                success: false,
                error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ç–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞'
            });
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –±–ª–æ–∫–∞
        const query = {
            $or: [
                { globalTags: { $in: tags } },
                { 'blocks.tags': { $in: tags } }
            ]
        };

        if (blockType) {
            query['blocks.type'] = blockType;
        }

        const documents = await Data.find(query);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${documents.length}`);

        const results = documents.map(doc => {
            // –§–∏–ª—å—Ç—Ä—É–µ–º –±–ª–æ–∫–∏ –ø–æ —Ç–µ–≥–∞–º –∏ —Ç–∏–ø—É
            const matchingBlocks = doc.blocks.filter(block => 
                (block.tags.some(tag => tags.includes(tag)) || 
                doc.globalTags.some(tag => tags.includes(tag))) &&
                (!blockType || block.type === blockType)
            );

            return {
                _id: doc._id,
                fileName: doc.fileName,
                companyName: doc.companyName,
                uploadDate: doc.uploadDate,
                globalTags: doc.globalTags,
                matchingBlocks: matchingBlocks.map(block => ({
                    blockId: block.blockId,
                    type: block.type,
                    tags: block.tags
                }))
            };
        }).filter(doc => doc.matchingBlocks.length > 0);

        return res.json({
            success: true,
            results: results
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        return res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞',
            details: error.message
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
router.get('/blocks/:fileId', async (req, res) => {
    try {
        const { fileId } = req.params;
        const { tags } = req.query;
        console.log('\n=== –ó–∞–ø—Ä–æ—Å –±–ª–æ–∫–æ–≤ —Ñ–∞–π–ª–∞ ===');
        console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { fileId, tags });

        const document = await Data.findById(fileId);
        
        if (!document) {
            console.log('‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', fileId);
            return res.status(404).json({
                success: false,
                error: '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º –±–ª–æ–∫–∏ –ø–æ —Ç–µ–≥–∞–º, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
        let blocks = document.blocks;
        if (tags && Array.isArray(tags) && tags.length > 0) {
            blocks = blocks.filter(block => 
                block.tags.some(tag => tags.includes(tag)) ||
                document.globalTags.some(tag => tags.includes(tag))
            );
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        const formattedBlocks = blocks.map(block => {
            try {
                const formattedBlock = {
                    id: block.blockId,
                    type: block.type,
                    tags: block.tags,
                    isOversized: false,
                    dimensions: null
                };

                if (block.type === 'table' && block.content) {
                    const rowCount = block.content.rows ? block.content.rows.length : 0;
                    const colCount = block.content.headers ? block.content.headers.length : 0;
                    
                    formattedBlock.dimensions = {
                        rows: rowCount,
                        columns: colCount
                    };
                    formattedBlock.isOversized = rowCount > 20 || colCount > 10;
                }

                return formattedBlock;
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∞:', err);
                return null;
            }
        }).filter(block => block !== null);

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤: ${formattedBlocks.length}`);

        return res.json({
            success: true,
            count: formattedBlocks.length,
            blocks: formattedBlocks
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–æ–∫–æ–≤:', error);
        return res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–æ–∫–æ–≤',
            details: error.message
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
router.get('/block/:blockId', async (req, res) => {
    try {
        const { blockId } = req.params;
        console.log('\n=== –ó–∞–ø—Ä–æ—Å –±–ª–æ–∫–∞ ===');
        console.log('ID –±–ª–æ–∫–∞:', blockId);

        const document = await Data.findOne({ 'blocks.blockId': blockId });

        if (!document || !document.blocks) {
            console.log('‚ùå –ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return res.status(404).json({
                success: false,
                error: '–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        const block = document.blocks.find(b => b.blockId === blockId);
        
        if (!block) {
            console.log('‚ùå –ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ');
            return res.status(404).json({
                success: false,
                error: '–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ'
            });
        }

        console.log('\nüì¶ –ò—Å—Ö–æ–¥–Ω—ã–π –±–ª–æ–∫ –∏–∑ –ë–î:', JSON.stringify(block, null, 2));

        if (block.type === 'table' && block.content) {
            try {
                if (!block.content.headers || !block.content.rows) {
                    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã');
                }
        
                let matrix = [];
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                const headers = block.content.headers.map(h => h.value || '');
                matrix.push(headers);
        
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                block.content.rows.forEach((row) => {
                    if(!row.cells) return;
        
                    const rowData = [];
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É –≤ —Å—Ç—Ä–æ–∫–µ
                    headers.forEach((_, index) => {
                        const cell = row.cells[index.toString()];
                        
                        if (!cell || cell.value === undefined || cell.value === null) {
                            rowData.push('');
                            return;
                        }
        
                        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                        let formattedValue = '';
                        switch (cell.type) {
                            case 'date':
                                try {
                                    const date = new Date(cell.value);
                                    if (!isNaN(date)) {
                                        formattedValue = date.toLocaleDateString('ru-RU');
                                    } else {
                                        formattedValue = cell.value.toString();
                                    }
                                } catch (e) {
                                    formattedValue = cell.value.toString();
                                }
                                break;
                            case 'number':
                                formattedValue = Number(cell.value).toLocaleString('ru-RU');
                                break;
                            case 'string':
                            default:
                                formattedValue = cell.value.toString();
                        }
                        rowData.push(formattedValue);
                    });
                    
                    matrix.push(rowData);
                });
        
                // –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                matrix = matrix.filter(row => row.some(cell => cell !== ''));
        
                if (matrix.length === 0 || matrix[0].length === 0) {
                    throw new Error('–ü—É—Å—Ç–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
                }
        
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è PowerPoint
                return res.json({
                    success: true,
                    block: {
                        id: block.blockId,
                        type: 'table',
                        content: matrix,
                        dimensions: {
                            rows: matrix.length,
                            columns: matrix[0].length
                        },
                        formatting: {
                            hasHeaders: true,
                            firstRowAsHeaders: true,
                            autoFitColumns: true
                        }
                    }
                });
                
            } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: ' + err.message
                });
            }
        }
                

        // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
        if (block.type === 'text') {
            return res.json({
                success: true,
                block: {
                    id: block.blockId,
                    type: 'text',
                    content: block.content && block.content.text ? block.content.text : ''
                }
            });
        }

        return res.status(400).json({
            success: false,
            error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –±–ª–æ–∫–∞'
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–æ–∫–∞:', error);
        return res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–æ–∫–∞: ' + error.message
        });
    }
});

module.exports = router;


