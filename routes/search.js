// File: routes/search.js
// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

const express = require('express');
const router = express.Router();
const Data = require('../models/Data');

// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –ø–æ–∏—Å–∫–∞
router.post('/', async (req, res) => {
    try {
        console.log('\n=== –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å ===');
        console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:', req.body);
        const { tags } = req.body;

        if (!tags || !Array.isArray(tags) || tags.length === 0) {
            console.log('‚ùå –û—à–∏–±–∫–∞: —Ç–µ–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã');
            return res.status(400).json({
                success: false,
                error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ç–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞'
            });
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –∏–∑ –º–æ–¥–µ–ª–∏
        const documents = await Data.findByTags(tags);

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${documents.length}`);

        const results = documents.map(doc => ({
            _id: doc._id,
            fileName: doc.fileName,
            companyName: doc.companyName,
            uploadDate: doc.uploadDate,
            globalTags: doc.globalTags
        }));

        return res.json({
            success: true,
            results: results
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        return res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞',
            details: error.message
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
router.get('/blocks/:fileId', async (req, res) => {
    try {
        const { fileId } = req.params;
        console.log('\n=== –ó–∞–ø—Ä–æ—Å –±–ª–æ–∫–æ–≤ —Ñ–∞–π–ª–∞ ===');
        console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { fileId });

        const document = await Data.findById(fileId);
        
        if (!document) {
            console.log('‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', fileId);
            return res.status(404).json({
                success: false,
                error: '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        const blocks = document.blocks.map(block => {
            try {
                const formattedBlock = {
                    id: block.blockId,
                    type: block.type,
                    isOversized: false,
                    dimensions: null
                };

                if (block.type === 'table' && block.content) {
                    const rowCount = block.content.rows ? block.content.rows.length : 0;
                    const colCount = block.content.headers ? block.content.headers.length : 0;
                    
                    formattedBlock.dimensions = {
                        rows: rowCount,
                        columns: colCount
                    };
                    formattedBlock.isOversized = rowCount > 20 || colCount > 10;
                }

                return formattedBlock;
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∞:', err);
                return null;
            }
        }).filter(block => block !== null);

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤: ${blocks.length}`);
        console.log('üìä –†–∞–∑–º–µ—Ä—ã –±–ª–æ–∫–æ–≤:', blocks.map(b => b.dimensions));

        return res.json({
            success: true,
            count: blocks.length,
            blocks: blocks
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–æ–∫–æ–≤:', error);
        return res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–æ–∫–æ–≤',
            details: error.message
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
router.get('/block/:blockId', async (req, res) => {
    try {
        const { blockId } = req.params;
        console.log('\n=== –ó–∞–ø—Ä–æ—Å –±–ª–æ–∫–∞ ===');
        console.log('ID –±–ª–æ–∫–∞:', blockId);

        const document = await Data.findOne(
            { 'blocks.blockId': blockId }
        );

        if (!document || !document.blocks) {
            console.log('‚ùå –ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return res.status(404).json({
                success: false,
                error: '–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –±–ª–æ–∫
        const block = document.blocks.find(b => b.blockId === blockId);
        
        if (!block) {
            console.log('‚ùå –ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ');
            return res.status(404).json({
                success: false,
                error: '–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ'
            });
        }

        console.log('\nüì¶ –ò—Å—Ö–æ–¥–Ω—ã–π –±–ª–æ–∫ –∏–∑ –ë–î:', JSON.stringify(block, null, 2));

        // File: routes/search.js
        // –í –º–∞—Ä—à—Ä—É—Ç–µ /block/:blockId –∑–∞–º–µ–Ω–∏—Ç–µ –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π:

        if (block.type === 'table' && block.content) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if (!block.content.headers || !block.content.rows) {
                    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã');
                }

                // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö
                let matrix = [];
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                const headers = block.content.headers.map(h => h.value || '');
                matrix.push(headers);

                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                block.content.rows.forEach((row) => {
                    if(!row.cells) return;

                    //–°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
                    const rowData = [];
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É –≤ —Å—Ç—Ä–æ–∫–µ
                    for (let i = 0; i < headers.length; i++) {
                        const cell = row.cells[i.toString()];
                        
                        if (!cell || cell.value == undefined || cell.value === null) {
                            rowData.push('');
                            continue;
                        }

                        switch (cell.type) {
                            case 'date':
                                try {
                                    const date = new Date(cell.value);
                                    rowData.push(date.toLocaleDateString('ru-RU'));
                                } catch (e) {
                                    rowData.push(cell.value.toString());
                                }
                                break;
                            case 'string':
                            case 'number':
                            default:
                                rowData.push(cell.value.toString());
                        }
                    }
                      
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Ç—Ä–∏—Ü—É
                    matrix.push(rowData);
                });

                // –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                matrix = matrix.filter(row => row.some(cell => cell !== ''));

                console.log('\nüìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:', JSON.stringify(matrix, null, 2));

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Ç—Ä–∏—Ü–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                if (matrix.length === 0 || matrix[0].length === 0) {
                    throw new Error('–ü—É—Å—Ç–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
                }

                return res.json({
                    success: true,
                    block: {
                        id: block.blockId,
                        type: 'table',
                        content: matrix,
                        dimensions: {
                            rows: matrix.length,
                            columns: matrix[0].length
                        }
                    }
                });
                
            } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: ' + err.message
                });
            }
        }

        // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
        if (block.type === 'text') {
            return res.json({
                success: true,
                block: {
                    id: block.blockId,
                    type: 'text',
                    content: block.content && block.content.text ? block.content.text : ''
                }
            });
        }

        return res.status(400).json({
            success: false,
            error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –±–ª–æ–∫–∞'
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–æ–∫–∞:', error);
        return res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–æ–∫–∞: ' + error.message
        });
    }
});

module.exports = router;


